<!doctype html>
<html><!-- InstanceBegin template="/Templates/OneColumnPage.dwt" codeOutsideHTMLIsLocked="false" -->
<head>
<meta charset="utf-8">
<!-- InstanceBeginEditable name="doctitle" -->
<title>Introduction</title>
<!-- InstanceEndEditable -->
<!-- InstanceBeginEditable name="head" -->
<!-- InstanceEndEditable -->
<link href="App.css" rel="stylesheet" type="text/css">
</head>

<body>

<div class="container">
<div class="content">
<!-- InstanceBeginEditable name="Title" -->
<h1>pprint -- A print program</h1>
<!-- InstanceEndEditable -->

<!-- InstanceBeginEditable name="Body" -->
<h2>Introduction</h2>
<p>
About 5 decades ago I was writing code using a teletype, a time sharing computer and a shared printer.
In order to understand the programs I was modifying I would print out the source to study.  But there were
two problems.  The programs were organized with one statement (sometimes assembly language, one instruction) per
line.  A decent function would take many, many lines on the printed page.  I once tried to understand a 40 page
subroutine (but that was many years later).
</p>
<p>
So to solve the waste of most of each page of paper I evolved writing (even in assembly
language) two or more statements (instructions) per line.  This kept the functions small enough to fit on a 
single page but the print programs of the time did not make any attempt to keep a function on one page.  Thus an
early version of pp (short for print program) was written.
</p>
<p>
The main ingredient of pp is the organization of the functions:
</p>
<ul>
<li>Each function is preceded by two blank lines and followed by two blank lines</li>
<lI>Single blank lines may appear in the function</lI>
</ul>
<p>
So this print program attempts to place page ejects between functions provided that the paper is partially filled.
The goal is to present each function on a single page whenever that is possible.  Sometimes that is not
possible so a single blank is chosen for the page eject.  And so on...
</p>
<p>
Every printer behaves a little differently with respect to number of characters per line and the number of lines
per page.  The application has commands to customize print output for each printer.  Furthermore, only text files
may be processed by this program so the application maintains a list of acceptable extensions (e.g. cpp txt, h)
that will be processed for printing by the application (which can be over ridden by checkbox).  The application
also allows wildcard characters (i.e. '*', '?').
</p>
<p>
The program also places the name, date and time and page numbers on the output.  In the good old days this was
useful to keep track of the latest version and to keep large programs organized in the correct order.
</p>
<p>
The application is a dialog box with a menu and toolbar. The dialog controls modify the behavior of the program.
There are commands to change the scaling, edit the extensions that may be processed and a command to print the
requested list of files given in the text box.  These issues are discussed in the on the <a href="Operations.htm">operations page</a>.
</p>
<!-- InstanceEndEditable -->
</div><!-- end .content -->
</div><!-- end .container -->
</body>
<!-- InstanceEnd --></html>
